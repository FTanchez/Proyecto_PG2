<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Imports\VulnerabilityTicketImport;
use Maatwebsite\Excel\Facades\Excel;

use App\Models\VulnerabilityTicket;
use App\Models\User;
use App\Models\TicketLog;
use App\Models\PluginLearn;
use App\Models\TicketLearn;

use Auth;

class VulnerabilityTicketController extends Controller
{
    public function list() {
        $roleId = auth()->user()->role_id;
        $userId = auth()->user()->id;
        
        if($roleId === 1) {
            $vulnerabilities = VulnerabilityTicket::list();
            $vulnerabilities = $vulnerabilities->sortByDesc('id');
        } else {
            $all = VulnerabilityTicket::list()->all();
            $vulnerabilities = array();

            foreach($all as $tnb)
            {
                if($tnb->user_id == $userId) {
                    $vulnerabilities[] = $tnb;
                }
            }
        }
        
        return view('dashboard', [
            "roleId" =>  $roleId, 
            'vulnerabilities' => $vulnerabilities]);
    }

    public function import($type)
    {
        return view('importer.import', ["ticketTypeId" => $type]);
    }

    public function store(Request $request)
    {
        Excel::import(new VulnerabilityTicketImport($request->ticketTypeId), $request->file("file"));
        return redirect('dashboard');
    }

    public function viewLog($id) {
        $ticket = VulnerabilityTicket::get($id);
        $pluginLearn = null;

        if($ticket->state_id === 4) {
            $ticketLog = TicketLearn::where("ticket_id", $id)->get();
            $singleTicketLog = count($ticketLog) ? $ticketLog[0] : null;
            $pluginLearn = PluginLearn::find($singleTicketLog->plugin_learn_id);
        }

        $vulnerabilities = VulnerabilityTicket::log($id);
        
        return view('tickets.log', [
            "vulnerabilities" => $vulnerabilities, 
            'learn' => $pluginLearn,
            'ticket' => $ticket
        ]);
    }

    public function assign($id) {
        $ticket = VulnerabilityTicket::get($id);
        if(Auth::user()->id ===  1 || Auth::user()->id ===  3) {
            $users = User::all();
            return view('tickets.assign', ["ticket" => $ticket, 'users' => $users]);
        } else {
            switch ($ticket->state_id) {
                case 1:
                case 2:
                    return view('tickets.start', ["ticket" => $ticket]);
                    break;
                case 3:
                    $db = PluginLearn::get($ticket->idp);
                    return view('tickets.work', ["ticket" => $ticket, 'data' => $db, 'count' => count($db)]);
                    break;
                case 4:
                    return redirect('ticket/'.$ticket->id);
                    break;
                default:
                    # code...
                    break;
            }
        }
    }

    public function assignTicket(Request $request)
    {
        $request->validate([
            'id' => ['required'],
            'userId' => ['required'],
        ]);


        $ticket = VulnerabilityTicket::find($request->id);
        $ticket->user_id = $request->userId;
        $ticket->save();

        TicketLog::create([
            "ticket_id" => $ticket->id,
            "user_id" => $request->userId,
            "state_id" => $ticket->state_id,
            "status" => true,
            "created_by" => auth()->user()->id
        ]);

        return redirect("ticket/{$ticket->id}");
    }

    public function startTicket(Request $request)
    {
        $request->validate([
            'id' => ['required']
        ]);


        $ticket = VulnerabilityTicket::find($request->id);
        $ticket->state_id = 3;
        $ticket->save();

        TicketLog::create([
            "ticket_id" => $ticket->id,
            "user_id" => auth()->user()->id,
            "state_id" => 3,
            "status" => true,
            "created_by" => auth()->user()->id
        ]);

        return redirect("ticket/{$ticket->id}");
    }

    public function addTicketSolution(Request $request)
    {
        $request->validate([
            'id' => ['required'],
            'solution' => ['required'],
        ]);

        PluginLearn::create([
            "plugin_id" => $request->id,
            "solution" => $request->solution,
            "rollback" => $request->rollback,
            "status" => true,
            "created_by" => auth()->user()->id
        ]);
        
        return redirect("ticket/{$request->ticket_id}/assign");
    }

    
    public function storeTicketSolution(Request $request)
    {
        TicketLearn::create([
            'plugin_learn_id' => $request->learnId,
            'ticket_id' => $request->ticketId,
            'status' => true
        ]);

        $ticket = VulnerabilityTicket::find($request->ticketId);
        $ticket->state_id = 4;
        $ticket->execute_id = 3;
        $ticket->save();

        TicketLog::create([
            "ticket_id" => $request->ticketId,
            "user_id" => auth()->user()->id,
            "state_id" => 4,
            "status" => true,
            "created_by" => auth()->user()->id
        ]);

        return response()->json(['stored' => 1]);
    }
}
