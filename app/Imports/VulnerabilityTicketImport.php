<?php

namespace App\Imports;

use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Illuminate\Support\Collection;
use Maatwebsite\Excel\Concerns\ToCollection;
use Illuminate\Support\Str;

use App\Models\VulnerabilityTicket;
use App\Models\OperatingSystem;
use App\Models\Severity;
use App\Models\State;
use App\Models\Execute;
use App\Models\User;
use App\Models\Plugin;
use App\Models\TicketLog;

class VulnerabilityTicketImport implements ToCollection, WithHeadingRow
{
    private $ticketTypeId = 1;

    public function __construct(int $ticketTypeId) 
    {
        $this->ticketTypeId = $ticketTypeId;
    }

    public function str_without_accents($str, $charset='utf-8')
    {
        $str = htmlentities($str, ENT_NOQUOTES, $charset);

        $str = preg_replace('#&([A-za-z])(?:acute|cedil|caron|circ|grave|orn|ring|slash|th|tilde|uml);#', '\1', $str);
        $str = preg_replace('#&([A-za-z]{2})(?:lig);#', '\1', $str);
        $str = preg_replace('#&[^;]+;#', '', $str);

        return $str;
    }

    public function str_standarize($str) {
        return ucfirst($this->str_without_accents(strtolower($str)));
    }
    
    public function collection(Collection $rows)
    {
        foreach ($rows as $row) 
        {   
            //$createdAt = $row['created_at'];
            $pluginId = isset($row['plugin_id']) ? trim($row['plugin_id']):  "unknown";
            $pluginName = isset($row['plugin_name']) ? trim($row['plugin_name']) : "unknown";
            
            $severityName = isset($row['severty_id']) ? $this->str_standarize($row['severty_id']) : "Baja";
            
            $ip = $row['ip'];
            $port = $row['port'];
            $dnsName = $row['dns_name'];
            $operatingSystemName = strtoupper($row['operating_system_id']);
            $operatingSystemSlug = Str::slug($row['operating_system_id'], "-");
            $pluginOutput = $row['plugin_output'];
         
            $ticketStatusName = isset($row['ticket_status_id']) ? $this->str_standarize($row['ticket_status_id']) : "Pendiente";
            $userEmail = $row['user_id'];
 
            $executedName = isset($row['executed_id']) ? $this->str_standarize($row['executed_id']) : "Pendiente";
            
            
            $os = OperatingSystem::where('slug', $operatingSystemSlug)->first();
            
            //If OS doesn't exist, create new OS
            if(empty($os)) {
                $os = OperatingSystem::create([
                    'name' => $operatingSystemName,
                    'slug' => $operatingSystemSlug,
                    'status' => true
                ]);
            }

            //If plugin doesn't exist, create a  new plugin
            $plugin = Plugin::where('idp', $pluginId)->where('ticket_type_id', intval($this->ticketTypeId))->first();

            if(empty($plugin)) {
                $plugin = Plugin::create([
                    'idp' => $pluginId,
                    'name' => $pluginName,
                    'solution' => "--",
                    'rollback' => "--",
                    'operating_system_id' => $os->id,
                    'status' => true,
                    'ticket_type_id' => intval($this->ticketTypeId)
                ]);
            }

            $severity = Severity::where('name', $severityName)->first();
            $execute = Execute::where('name', $executedName)->first();
            $status = State::where('name', $ticketStatusName)->first();
            
            $user = User::where('email', $userEmail)->first();
            
            //If email is unknown, assign unassigned user
            if(empty($user)) {
                $user = User::find(3);
            }
            
            $ticket = VulnerabilityTicket::create([
                "plugin_id" => $plugin->id,
                "asigned_date" => date('Y-m-d H:i:s'),
                "severity_id" => $severity->id,
                "ip" => $ip,
                "port" => $port,
                "dns" => $dnsName,
                "plugin_output" => $pluginOutput,
                "maker_solution" => "--",
                "state_id" => $status->id,
                "user_id" => $user->id,
                "authorized" => true,
                "execute_id" => $execute->id,
                "solution" => "--",
                "rollback" => "--",
                "solution_date" => date('Y-m-d H:i:s'),
                "status" => true,
                'ticket_type_id' => intval($this->ticketTypeId)
            ]);

            TicketLog::create([
                "ticket_id" => $ticket->id,
                "user_id" => $user->id,
                "state_id" => $status->id,
                "status" => true,
                "created_by" => auth()->user()->id
            ]);
        }
    }
}
